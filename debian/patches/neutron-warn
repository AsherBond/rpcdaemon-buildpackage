diff --git a/rpcdaemon/lib/neutronagent.py b/rpcdaemon/lib/neutronagent.py
index 0118434..d7e71c8 100644
--- a/rpcdaemon/lib/neutronagent.py
+++ b/rpcdaemon/lib/neutronagent.py
@@ -10,8 +10,10 @@ from json import loads
 
 try:
     from neutronclient.v2_0.client import Client
+    from neutronclient.common.exceptions import NeutronException as NeutronAgentException
 except:
     from quantumclient.v2_0.client import Client
+    from quantumclient.common.exceptions import QuantumException as NeutronAgentException
 
 
 # Generalized neutron agent handler
diff --git a/rpcdaemon/plugins/dhcpagent.py b/rpcdaemon/plugins/dhcpagent.py
index 6e167fb..13faaac 100644
--- a/rpcdaemon/plugins/dhcpagent.py
+++ b/rpcdaemon/plugins/dhcpagent.py
@@ -3,7 +3,9 @@ from uuid import uuid4
 from itertools import product
 
 # Neutron Agent superclass
-from rpcdaemon.lib.neutronagent import NeutronAgent
+from rpcdaemon.lib.neutronagent import NeutronAgent, NeutronAgentException
+
+
 
 # RPC superclass
 from rpcdaemon.lib.rpc import RPC
@@ -73,10 +75,16 @@ class DHCPAgent(NeutronAgent, RPC):
                         str(agent['id'])
                     )
                 )
-                self.client.remove_network_from_dhcp_agent(
-                    agent['id'],
-                    network['id']
-                )
+                # Races between multiple rpc agents can make this
+                # crash
+                try:
+                    self.client.remove_network_from_dhcp_agent(
+                        agent['id'],
+                        network['id']
+                    )
+                except NeutronAgentException:
+                    self.logger.warn('Network %s already removed from agent %s' % (
+                        network['id'], agent['id']))
 
         self.logger.debug('Targets: %s' % targets.keys())
 
@@ -113,10 +121,17 @@ class DHCPAgent(NeutronAgent, RPC):
                             str(target)
                         )
                     )
-                    self.client.add_network_to_dhcp_agent(
-                        target,
-                        {'network_id': network}
-                    )
+                    # This can race between multiple rpcdaemon
+                    # instances
+                    try:
+                        self.client.add_network_to_dhcp_agent(
+                            target,
+                            {'network_id': network}
+                        )
+                    except NeutronAgentException:
+                        self.logger.warn('Network %s already added to agent %s' % (
+                            network, target))
+                        pass
         # No agents, any networks?
         elif networks:
             self.logger.warn('No agents found to schedule networks to.')
diff --git a/rpcdaemon/plugins/l3agent.py b/rpcdaemon/plugins/l3agent.py
index 1289ec0..1c75c82 100644
--- a/rpcdaemon/plugins/l3agent.py
+++ b/rpcdaemon/plugins/l3agent.py
@@ -3,7 +3,7 @@ from uuid import uuid4
 from itertools import cycle
 
 # Neutron Agent superclass
-from rpcdaemon.lib.neutronagent import NeutronAgent
+from rpcdaemon.lib.neutronagent import NeutronAgent, NeutronAgentException
 
 # RPC superclass
 from rpcdaemon.lib.rpc import RPC
@@ -110,10 +110,15 @@ class L3Agent(NeutronAgent, RPC):
                         str(target)
                     )
                 )
-                self.client.add_router_to_l3_agent(
-                    target,
-                    {'router_id': router}
-                )
+                # this can cause errors if multiple rpcdaemons are running
+                try:
+                    self.client.add_router_to_l3_agent(
+                        target,
+                        {'router_id': router}
+                    )
+                except NeutronAgentException:
+                    self.logger.warn('Router %s already added to agent %s' % (
+                        router, target))
         # No agents, any routers?
         elif routers:
             self.logger.warn('No agents found to schedule routers to.')
